// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blooms.proto

#ifndef PROTOBUF_INCLUDED_blooms_2eproto
#define PROTOBUF_INCLUDED_blooms_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_blooms_2eproto 

namespace protobuf_blooms_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_blooms_2eproto
namespace blooms {
class BloomFilter;
class BloomFilterDefaultTypeInternal;
extern BloomFilterDefaultTypeInternal _BloomFilter_default_instance_;
class BloomVector;
class BloomVectorDefaultTypeInternal;
extern BloomVectorDefaultTypeInternal _BloomVector_default_instance_;
}  // namespace blooms
namespace google {
namespace protobuf {
template<> ::blooms::BloomFilter* Arena::CreateMaybeMessage<::blooms::BloomFilter>(Arena*);
template<> ::blooms::BloomVector* Arena::CreateMaybeMessage<::blooms::BloomVector>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace blooms {

// ===================================================================

class BloomFilter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:blooms.BloomFilter) */ {
 public:
  BloomFilter();
  virtual ~BloomFilter();

  BloomFilter(const BloomFilter& from);

  inline BloomFilter& operator=(const BloomFilter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BloomFilter(BloomFilter&& from) noexcept
    : BloomFilter() {
    *this = ::std::move(from);
  }

  inline BloomFilter& operator=(BloomFilter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BloomFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BloomFilter* internal_default_instance() {
    return reinterpret_cast<const BloomFilter*>(
               &_BloomFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(BloomFilter* other);
  friend void swap(BloomFilter& a, BloomFilter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BloomFilter* New() const final {
    return CreateMaybeMessage<BloomFilter>(NULL);
  }

  BloomFilter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BloomFilter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BloomFilter& from);
  void MergeFrom(const BloomFilter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BloomFilter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated fixed64 filter = 6;
  int filter_size() const;
  void clear_filter();
  static const int kFilterFieldNumber = 6;
  ::google::protobuf::uint64 filter(int index) const;
  void set_filter(int index, ::google::protobuf::uint64 value);
  void add_filter(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      filter() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_filter();

  // optional string name = 5;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 5;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint64 bf_size = 1;
  bool has_bf_size() const;
  void clear_bf_size();
  static const int kBfSizeFieldNumber = 1;
  ::google::protobuf::uint64 bf_size() const;
  void set_bf_size(::google::protobuf::uint64 value);

  // optional uint64 max_elem = 2;
  bool has_max_elem() const;
  void clear_max_elem();
  static const int kMaxElemFieldNumber = 2;
  ::google::protobuf::uint64 max_elem() const;
  void set_max_elem(::google::protobuf::uint64 value);

  // optional uint64 elem_count = 3;
  bool has_elem_count() const;
  void clear_elem_count();
  static const int kElemCountFieldNumber = 3;
  ::google::protobuf::uint64 elem_count() const;
  void set_elem_count(::google::protobuf::uint64 value);

  // optional uint32 id = 4;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 4;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:blooms.BloomFilter)
 private:
  void set_has_bf_size();
  void clear_has_bf_size();
  void set_has_max_elem();
  void clear_has_max_elem();
  void set_has_elem_count();
  void clear_has_elem_count();
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > filter_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 bf_size_;
  ::google::protobuf::uint64 max_elem_;
  ::google::protobuf::uint64 elem_count_;
  ::google::protobuf::uint32 id_;
  friend struct ::protobuf_blooms_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BloomVector : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:blooms.BloomVector) */ {
 public:
  BloomVector();
  virtual ~BloomVector();

  BloomVector(const BloomVector& from);

  inline BloomVector& operator=(const BloomVector& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BloomVector(BloomVector&& from) noexcept
    : BloomVector() {
    *this = ::std::move(from);
  }

  inline BloomVector& operator=(BloomVector&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BloomVector& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BloomVector* internal_default_instance() {
    return reinterpret_cast<const BloomVector*>(
               &_BloomVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(BloomVector* other);
  friend void swap(BloomVector& a, BloomVector& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BloomVector* New() const final {
    return CreateMaybeMessage<BloomVector>(NULL);
  }

  BloomVector* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BloomVector>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BloomVector& from);
  void MergeFrom(const BloomVector& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BloomVector* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 filter_count = 1;
  bool has_filter_count() const;
  void clear_filter_count();
  static const int kFilterCountFieldNumber = 1;
  ::google::protobuf::int32 filter_count() const;
  void set_filter_count(::google::protobuf::int32 value);

  // optional int32 id = 3;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 3;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional uint64 filesize = 4;
  bool has_filesize() const;
  void clear_filesize();
  static const int kFilesizeFieldNumber = 4;
  ::google::protobuf::uint64 filesize() const;
  void set_filesize(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:blooms.BloomVector)
 private:
  void set_has_filter_count();
  void clear_has_filter_count();
  void set_has_name();
  void clear_has_name();
  void set_has_id();
  void clear_has_id();
  void set_has_filesize();
  void clear_has_filesize();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 filter_count_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::uint64 filesize_;
  friend struct ::protobuf_blooms_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BloomFilter

// optional uint64 bf_size = 1;
inline bool BloomFilter::has_bf_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BloomFilter::set_has_bf_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BloomFilter::clear_has_bf_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BloomFilter::clear_bf_size() {
  bf_size_ = GOOGLE_ULONGLONG(0);
  clear_has_bf_size();
}
inline ::google::protobuf::uint64 BloomFilter::bf_size() const {
  // @@protoc_insertion_point(field_get:blooms.BloomFilter.bf_size)
  return bf_size_;
}
inline void BloomFilter::set_bf_size(::google::protobuf::uint64 value) {
  set_has_bf_size();
  bf_size_ = value;
  // @@protoc_insertion_point(field_set:blooms.BloomFilter.bf_size)
}

// optional uint64 max_elem = 2;
inline bool BloomFilter::has_max_elem() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BloomFilter::set_has_max_elem() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BloomFilter::clear_has_max_elem() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BloomFilter::clear_max_elem() {
  max_elem_ = GOOGLE_ULONGLONG(0);
  clear_has_max_elem();
}
inline ::google::protobuf::uint64 BloomFilter::max_elem() const {
  // @@protoc_insertion_point(field_get:blooms.BloomFilter.max_elem)
  return max_elem_;
}
inline void BloomFilter::set_max_elem(::google::protobuf::uint64 value) {
  set_has_max_elem();
  max_elem_ = value;
  // @@protoc_insertion_point(field_set:blooms.BloomFilter.max_elem)
}

// optional uint64 elem_count = 3;
inline bool BloomFilter::has_elem_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BloomFilter::set_has_elem_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BloomFilter::clear_has_elem_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BloomFilter::clear_elem_count() {
  elem_count_ = GOOGLE_ULONGLONG(0);
  clear_has_elem_count();
}
inline ::google::protobuf::uint64 BloomFilter::elem_count() const {
  // @@protoc_insertion_point(field_get:blooms.BloomFilter.elem_count)
  return elem_count_;
}
inline void BloomFilter::set_elem_count(::google::protobuf::uint64 value) {
  set_has_elem_count();
  elem_count_ = value;
  // @@protoc_insertion_point(field_set:blooms.BloomFilter.elem_count)
}

// optional uint32 id = 4;
inline bool BloomFilter::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BloomFilter::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BloomFilter::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BloomFilter::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 BloomFilter::id() const {
  // @@protoc_insertion_point(field_get:blooms.BloomFilter.id)
  return id_;
}
inline void BloomFilter::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:blooms.BloomFilter.id)
}

// optional string name = 5;
inline bool BloomFilter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BloomFilter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BloomFilter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BloomFilter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& BloomFilter::name() const {
  // @@protoc_insertion_point(field_get:blooms.BloomFilter.name)
  return name_.GetNoArena();
}
inline void BloomFilter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:blooms.BloomFilter.name)
}
#if LANG_CXX11
inline void BloomFilter::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:blooms.BloomFilter.name)
}
#endif
inline void BloomFilter::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:blooms.BloomFilter.name)
}
inline void BloomFilter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:blooms.BloomFilter.name)
}
inline ::std::string* BloomFilter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:blooms.BloomFilter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BloomFilter::release_name() {
  // @@protoc_insertion_point(field_release:blooms.BloomFilter.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BloomFilter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:blooms.BloomFilter.name)
}

// repeated fixed64 filter = 6;
inline int BloomFilter::filter_size() const {
  return filter_.size();
}
inline void BloomFilter::clear_filter() {
  filter_.Clear();
}
inline ::google::protobuf::uint64 BloomFilter::filter(int index) const {
  // @@protoc_insertion_point(field_get:blooms.BloomFilter.filter)
  return filter_.Get(index);
}
inline void BloomFilter::set_filter(int index, ::google::protobuf::uint64 value) {
  filter_.Set(index, value);
  // @@protoc_insertion_point(field_set:blooms.BloomFilter.filter)
}
inline void BloomFilter::add_filter(::google::protobuf::uint64 value) {
  filter_.Add(value);
  // @@protoc_insertion_point(field_add:blooms.BloomFilter.filter)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
BloomFilter::filter() const {
  // @@protoc_insertion_point(field_list:blooms.BloomFilter.filter)
  return filter_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
BloomFilter::mutable_filter() {
  // @@protoc_insertion_point(field_mutable_list:blooms.BloomFilter.filter)
  return &filter_;
}

// -------------------------------------------------------------------

// BloomVector

// optional int32 filter_count = 1;
inline bool BloomVector::has_filter_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BloomVector::set_has_filter_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BloomVector::clear_has_filter_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BloomVector::clear_filter_count() {
  filter_count_ = 0;
  clear_has_filter_count();
}
inline ::google::protobuf::int32 BloomVector::filter_count() const {
  // @@protoc_insertion_point(field_get:blooms.BloomVector.filter_count)
  return filter_count_;
}
inline void BloomVector::set_filter_count(::google::protobuf::int32 value) {
  set_has_filter_count();
  filter_count_ = value;
  // @@protoc_insertion_point(field_set:blooms.BloomVector.filter_count)
}

// optional string name = 2;
inline bool BloomVector::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BloomVector::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BloomVector::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BloomVector::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& BloomVector::name() const {
  // @@protoc_insertion_point(field_get:blooms.BloomVector.name)
  return name_.GetNoArena();
}
inline void BloomVector::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:blooms.BloomVector.name)
}
#if LANG_CXX11
inline void BloomVector::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:blooms.BloomVector.name)
}
#endif
inline void BloomVector::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:blooms.BloomVector.name)
}
inline void BloomVector::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:blooms.BloomVector.name)
}
inline ::std::string* BloomVector::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:blooms.BloomVector.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BloomVector::release_name() {
  // @@protoc_insertion_point(field_release:blooms.BloomVector.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BloomVector::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:blooms.BloomVector.name)
}

// optional int32 id = 3;
inline bool BloomVector::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BloomVector::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BloomVector::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BloomVector::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 BloomVector::id() const {
  // @@protoc_insertion_point(field_get:blooms.BloomVector.id)
  return id_;
}
inline void BloomVector::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:blooms.BloomVector.id)
}

// optional uint64 filesize = 4;
inline bool BloomVector::has_filesize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BloomVector::set_has_filesize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BloomVector::clear_has_filesize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BloomVector::clear_filesize() {
  filesize_ = GOOGLE_ULONGLONG(0);
  clear_has_filesize();
}
inline ::google::protobuf::uint64 BloomVector::filesize() const {
  // @@protoc_insertion_point(field_get:blooms.BloomVector.filesize)
  return filesize_;
}
inline void BloomVector::set_filesize(::google::protobuf::uint64 value) {
  set_has_filesize();
  filesize_ = value;
  // @@protoc_insertion_point(field_set:blooms.BloomVector.filesize)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace blooms

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_blooms_2eproto
